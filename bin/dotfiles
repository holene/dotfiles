#!/usr/bin/env bash

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

sub_help () {
  echo "Usage: $BIN_NAME <command>"
  echo
  echo "Commands:"
  echo "   clean            Clean up caches (brew, npm, gem, rvm)"
  echo "   dock             Apply macOS Dock settings"
  echo "   edit             Open dotfiles in IDE ($DOTFILES_IDE) and Git GUI ($DOTFILES_GIT_GUI)"
  echo "   help             This help message"
  echo "   macos            Apply macOS system defaults"
  echo "   test             Run tests"
  echo "   update           Update packages and pkg managers (OS, brew, npm, gem)"
}

sub_edit () {
  sh -c "$DOTFILES_IDE $DOTFILES_DIR"
  sh -c "$DOTFILES_GIT_GUI $DOTFILES_DIR"
}

sub_test () {
  bats "$DOTFILES_DIR"/test/*.bats
}

sub_update () {
  running "Running Softwareupdate"
  sudo softwareupdate -i -a
  ok
  running "brew update"
  brew update
  ok
  running "brew upgrade"
  brew upgrade
  ok
  running "updating npm"
  npm install npm -g
  npm update -g
  ok
}

sub_clean () {
  running "cleaning up brew, cask and npm"
  brew cleanup
  brew cask cleanup
  npm cache clean
  ok
}

sub_macos () {
  for DEFAULTS_FILE in "${DOTFILES_DIR}"/macos/defaults*.sh; do
    running "Applying ${DEFAULTS_FILE}" && . "${DEFAULTS_FILE}"
    ok
  done
  ok "Done. Some changes may require a logout/restart to take effect."
}

sub_dock () {
  running "reloading dock"
  . "${DOTFILES_DIR}/macos/dock.sh" && ok "Dock reloaded."
}

case $COMMAND_NAME in
  "" | "-h" | "--help")
    sub_help
    ;;
  *)
    shift
    sub_${COMMAND_NAME} $@
    if [ $? = 127 ]; then
      echo "'$COMMAND_NAME' is not a known command or has errors." >&2
      sub_help
      exit 1
    fi
    ;;
esac
